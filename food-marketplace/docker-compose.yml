version: '3.8'

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES (Database per Microservice + KRaft Kafka)
  # =============================================================================
  
  # User Service Database
  user-db:
    image: postgres:15-alpine
    container_name: food-marketplace-user-db
    environment:
      POSTGRES_DB: userservice
      POSTGRES_USER: useruser
      POSTGRES_PASSWORD: userpass123
    ports:
      - "5432:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U useruser -d userservice"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Menu Service Database
  menu-db:
    image: postgres:15-alpine
    container_name: food-marketplace-menu-db
    environment:
      POSTGRES_DB: menuservice
      POSTGRES_USER: menuuser
      POSTGRES_PASSWORD: menupass123
    ports:
      - "5433:5432"
    volumes:
      - menu_db_data:/var/lib/postgresql/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U menuuser -d menuservice"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service Database
  order-db:
    image: postgres:15-alpine
    container_name: food-marketplace-order-db
    environment:
      POSTGRES_DB: orderservice
      POSTGRES_USER: orderuser
      POSTGRES_PASSWORD: orderpass123
    ports:
      - "5434:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d orderservice"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Review Service Database
  review-db:
    image: postgres:15-alpine
    container_name: food-marketplace-review-db
    environment:
      POSTGRES_DB: reviewservice
      POSTGRES_USER: reviewuser
      POSTGRES_PASSWORD: reviewpass123
    ports:
      - "5435:5432"
    volumes:
      - review_db_data:/var/lib/postgresql/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reviewuser -d reviewservice"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Shared for sessions/cache)
  redis:
    image: redis:7-alpine
    container_name: food-marketplace-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka with KRaft (No Zookeeper needed!)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: food-marketplace-kafka
    environment:
      # KRaft mode configuration (No Zookeeper)
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_LISTENERS: 'PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # KRaft cluster metadata
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MICROSERVICES (Database per Service + Compensation Patterns)
  # =============================================================================

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-user-service
    depends_on:
      user-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://user-db:5432/userservice
      QUARKUS_DATASOURCE_USERNAME: useruser
      QUARKUS_DATASOURCE_PASSWORD: userpass123
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8081:8081"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Menu Service
  menu-service:
    build:
      context: ./menu-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-menu-service
    depends_on:
      menu-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://menu-db:5432/menuservice
      QUARKUS_DATASOURCE_USERNAME: menuuser
      QUARKUS_DATASOURCE_PASSWORD: menupass123
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8082:8082"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service (with Compensation/Rollback patterns)
  order-service:
    build:
      context: ./order-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-order-service
    depends_on:
      order-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://order-db:5432/orderservice
      QUARKUS_DATASOURCE_USERNAME: orderuser
      QUARKUS_DATASOURCE_PASSWORD: orderpass123
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8083:8083"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Review Service
  review-service:
    build:
      context: ./review-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-review-service
    depends_on:
      review-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://review-db:5432/reviewservice
      QUARKUS_DATASOURCE_USERNAME: reviewuser
      QUARKUS_DATASOURCE_PASSWORD: reviewpass123
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8084:8084"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service (New - for compensation patterns)
  payment-service:
    build:
      context: ./payment-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-payment-service
    depends_on:
      payment-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://payment-db:5432/paymentservice
      QUARKUS_DATASOURCE_USERNAME: paymentuser
      QUARKUS_DATASOURCE_PASSWORD: paymentpass123
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8085:8085"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service Database
  payment-db:
    image: postgres:15-alpine
    container_name: food-marketplace-payment-db
    environment:
      POSTGRES_DB: paymentservice
      POSTGRES_USER: paymentuser
      POSTGRES_PASSWORD: paymentpass123
    ports:
      - "5436:5432"
    volumes:
      - payment_db_data:/var/lib/postgresql/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U paymentuser -d paymentservice"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # DEVELOPMENT & MONITORING TOOLS
  # =============================================================================

  # Kafka UI for development (KRaft compatible)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: food-marketplace-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      # No Zookeeper needed for KRaft mode
    ports:
      - "8080:8080"
    networks:
      - food-marketplace-network

  # React Native Development Server (Optional for local dev)
  mobile-app:
    build:
      context: ./FoodMarketplaceApp
      dockerfile: Dockerfile.dev
    container_name: food-marketplace-mobile-app
    ports:
      - "3000:3000"  # Metro bundler
      - "19000:19000" # Expo (if used)
    volumes:
      - ./FoodMarketplaceApp:/app
      - /app/node_modules
    networks:
      - food-marketplace-network
    environment:
      - REACT_NATIVE_PACKAGER_HOSTNAME=0.0.0.0

# =============================================================================
# NETWORKS & VOLUMES (Database per Service)
# =============================================================================

networks:
  food-marketplace-network:
    driver: bridge

volumes:
  user_db_data:
  menu_db_data:
  order_db_data:
  review_db_data:
  payment_db_data:
  redis_data:
  kafka_data:
