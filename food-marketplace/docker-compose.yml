version: '3.8'

services:
  # =============================================================================
  # INFRASTRUCTURE SERVICES
  # =============================================================================
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: food-marketplace-postgres
    environment:
      POSTGRES_DB: foodmarketplace
      POSTGRES_USER: fooduser
      POSTGRES_PASSWORD: foodpass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fooduser -d foodmarketplace"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: food-marketplace-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: food-marketplace-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: food-marketplace-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:29092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MICROSERVICES
  # =============================================================================

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-user-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/foodmarketplace
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8081:8081"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Menu Service
  menu-service:
    build:
      context: ./menu-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-menu-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/foodmarketplace
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8082:8082"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-order-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/foodmarketplace
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8083:8083"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Review Service
  review-service:
    build:
      context: ./review-service
      dockerfile: src/main/docker/Dockerfile.jvm
    container_name: food-marketplace-review-service
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/foodmarketplace
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8084:8084"
    networks:
      - food-marketplace-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # DEVELOPMENT & MONITORING TOOLS
  # =============================================================================

  # Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: food-marketplace-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - "8080:8080"
    networks:
      - food-marketplace-network

# =============================================================================
# NETWORKS & VOLUMES
# =============================================================================

networks:
  food-marketplace-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
